#pragma once

#include <vector>
#include <memory>
#include <atomic>

#include "Block.h"
#include "Constants.h"
#include "TextureAtlas.h"
#include "Shader.h"
#include "VertexArray.h"
#include "VertexBuffer.h"
#include "VertexBufferLayout.h"
#include "ChunkCoord.h"

class World;

struct Vertex
{
    glm::vec3 pos;
    glm::vec2 uvs;
};

enum class ChunkState
{
    EMPTY,                 // Just created, no data yet
    TERRAIN_GENERATING,    // Terrain data being generated by a worker thread
    TERRAIN_GENERATED,     // Terrain data is ready, blocks array is filled
    MESH_GENERATING,       // Mesh data being generated by a worker thread
    MESH_READY_FOR_UPLOAD, // Mesh data is ready in buffer, waiting for main thread GPU upload
    LOADED                 // Fully processed, VBO/VAO set up, ready for rendering
};

class Chunk
{

public:
    ChunkCoord worldPos;
    ChunkState state = ChunkState::EMPTY;

    bool modelMatrixDirty = true;
    std::atomic<bool> isDirty = true;

    Chunk(Shader &shader, TextureAtlas *atlas, ChunkCoord pos, World *world);

    void renderChunk();
    void generateMesh();
    void uploadMeshToGPU();
    void configureVertexAttributes();
    void setDirty();
    void generateTerrain();

    const Block &getBlockAt(const glm::ivec3 &pos) const;

private:
    Shader &shader;
    TextureAtlas *textureAtlas;
    World *world;

    std::vector<Block> blocks;
    std::vector<float> meshDataBuffer;
    size_t vertexCount = 0;

    VertexArray vao;
    VertexBuffer vbo;

    glm::mat4 modelMatrix;

    void generateBlockMesh(const Block &block);
    std::vector<float> generateFacevertices(const Block &block, BlockFaces face, const std::vector<glm::vec2> &faceUVs) const;
    void addBlockFace(const Block &block, const BlockType type, const BlockFaces face);

    BlockType getNeighborBlockType(const glm::ivec3 blockPos, const glm::ivec3 offset);
    inline bool blockInChunkBounds(const glm::ivec3 &pos) const;
    inline bool isTransparent(BlockType type) const;
    inline size_t getBlockIndex(const glm::ivec3 &pos) const;
};